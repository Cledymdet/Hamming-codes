{"version":3,"sources":["utils/dec2binPadded.ts","utils/zeroPadString.ts","utils/dec2bin.ts","utils/isPowerOf2.ts","Components/Bit/Bit.tsx","utils/zeroOrOne.ts","utils/generateData.ts","utils/getCorrectParityBitValues.ts","Components/ColorBinary/ColorBinary.tsx","App.tsx","utils/validateDataArray.ts","serviceWorker.ts","index.tsx"],"names":["dec2binPadded","number","length","string","right","zeroPadString","toString","isPowerOf2","num","Bit","getColorClassName","props","bitIndex","doubleError","errorIndex","getOpacityClassName","mousedOverBitIndex","this","absolutePositioned","bit","height","isCell","numRows","numColumns","onClickBit","onMouseOverBit","paddedBinaryLength","showBinary","width","colorClassName","opacityClassName","absolutePosition","position","left","top","Math","floor","className","onClick","e","onMouseOver","style","paddingBottom","React","Component","zeroOrOne","generateData","numberBits","data","push","random","correctParityBitValues","powerOf2","parityBitIndex","pow","paritySum","compareBitIndex","getCorrectParityBitValues","forEach","value","reduce","accumulator","currentValue","ColorBinary","chars","split","map","char","charIndex","key","App","dataContainerInnerRef","calculations","memoize","ceil","sqrt","regularParityBits","filter","reverse","totalNumParityBits","parity","validateDataArray","state","efficiency","toFixed","log","getBitDimensions","dataContainerInnerWidth","windowInnerWidth","dimension","min","bitHeight","bitWidth","generateNewData","setState","getMousedOverText","returnArray","element","index","getRegularParityBitsExplanation","sharedBitProps","Fragment","onMouseLeave","regularParityBit","swapIncorrectBit","disabled","highlightBit","resize","current","clientWidth","switchBit","dataCopy","slice","createRef","window","addEventListener","removeEventListener","innerWidth","id","type","checked","onChange","ref","newDimension","step","parseInt","target","parityBit","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bf315971.chunk.js","sourcesContent":["import dec2bin from \"utils/dec2bin\";\nimport zeroPadString from \"utils/zeroPadString\";\n\nexport default function dec2binPadded(number: number, length: number) {\n  return zeroPadString(dec2bin(number), length);\n}\n","export default function zeroPadString(\n  string: string,\n  length: number,\n  right?: boolean\n) {\n  while (string.length < length) {\n    if (right) {\n      string = string + \"0\";\n    } else {\n      string = \"0\" + string;\n    }\n  }\n\n  return string;\n}\n","export default function dec2bin(dec: number) {\n  return (dec >>> 0).toString(2);\n}\n","export default function isPowerOf2(num: number) {\n  if (num === 0) {\n    return false;\n  }\n\n  return !(num & (num - 1));\n}\n","import React from \"react\";\n\nimport dec2binPadded from \"utils/dec2binPadded\";\nimport isPowerOf2 from \"utils/isPowerOf2\";\nimport \"./bit.scss\";\n\ninterface BitProps {\n  absolutePositioned: boolean;\n  bit: number;\n  bitIndex: number;\n  doubleError: boolean;\n  errorIndex: number;\n  height: number;\n  isCell: boolean;\n  mousedOverBitIndex: number;\n  numColumns: number;\n  numRows: number;\n  onClickBit: Function;\n  onMouseOverBit: Function;\n  paddedBinaryLength: number;\n  showBinary?: boolean;\n  width: number;\n}\n\ninterface AbsolutePosition {\n  position: \"absolute\" | \"relative\";\n  left?: string;\n  top?: string;\n}\n\nclass Bit extends React.Component<BitProps, {}> {\n  getColorClassName = () => {\n    const { bitIndex, doubleError, errorIndex } = this.props;\n\n    if (bitIndex === 0) {\n      return \"colorZerothBit\";\n    } else if (doubleError === false && errorIndex === bitIndex) {\n      return \"colorErrorBit\";\n    } else if (isPowerOf2(bitIndex)) {\n      return \"colorParityBit\";\n    }\n\n    return \"colorDataBit\";\n  };\n\n  getOpacityClassName = () => {\n    const { bitIndex, mousedOverBitIndex } = this.props;\n\n    if (bitIndex === 0) {\n      if (mousedOverBitIndex > 0) {\n        return \"opacityDimmed\";\n      }\n      return \"\";\n    } else if (\n      isPowerOf2(bitIndex) &&\n      mousedOverBitIndex >= 0 &&\n      bitIndex & mousedOverBitIndex\n    ) {\n      return \"\";\n    } else if (\n      mousedOverBitIndex >= 0 &&\n      isPowerOf2(mousedOverBitIndex) &&\n      bitIndex & mousedOverBitIndex\n    ) {\n      return \"\";\n    } else if (mousedOverBitIndex >= 0 && mousedOverBitIndex !== bitIndex) {\n      return \"opacityDimmed\";\n    }\n\n    return \"\";\n  };\n\n  render() {\n    const {\n      absolutePositioned,\n      bit,\n      bitIndex,\n      height,\n      isCell,\n      numRows,\n      numColumns,\n      onClickBit,\n      onMouseOverBit,\n      paddedBinaryLength,\n      showBinary,\n      width,\n    } = this.props;\n\n    const colorClassName = this.getColorClassName();\n    const opacityClassName = this.getOpacityClassName();\n\n    if (isCell) {\n      const absolutePosition: AbsolutePosition = { position: \"relative\" };\n      if (absolutePositioned) {\n        absolutePosition.position = \"absolute\";\n        absolutePosition.left =\n          ((100 * (bitIndex % numColumns)) / numColumns).toString() + \"%\"; //TODO memoize this\n        absolutePosition.top =\n          ((100 * Math.floor(bitIndex / numColumns)) / numRows).toString() +\n          \"%\";\n      }\n\n      return (\n        <span\n          className={`bit cell ${colorClassName} ${opacityClassName}`}\n          onClick={(e) => onClickBit(bitIndex)}\n          onMouseOver={(e) => onMouseOverBit(bitIndex)}\n          style={{\n            height: height - 2,\n            width: width - 2,\n            ...absolutePosition,\n          }}\n        >\n          <div\n            className=\"value\"\n            style={{\n              paddingBottom: showBinary ? \"0.25em\" : \"0\",\n            }}\n          >\n            {bit}\n          </div>\n          <div className=\"binaryBitIndex\">\n            {showBinary ? dec2binPadded(bitIndex, paddedBinaryLength) : null}\n          </div>\n          <div className=\"bitIndex\">{bitIndex}</div>\n        </span>\n      );\n    }\n\n    return (\n      <span\n        className={`bit messageBit ${colorClassName} ${opacityClassName}`}\n        onClick={(e) => onClickBit(bitIndex)}\n        onMouseOver={(e) => onMouseOverBit(bitIndex)}\n      >\n        {bit}\n      </span>\n    );\n  }\n}\n\nexport default Bit;\n","export default function zeroOrOne(number: number) {\n  return number > 0 ? 1 : 0;\n}\n","import getCorrectParityBitValues from \"utils/getCorrectParityBitValues\";\n\nexport default function generateData(numberBits: number): number[] {\n  const data = [0];\n\n  while (data.length < numberBits) {\n    data.push(Math.random() > 0.5 ? 1 : 0);\n  }\n\n  getCorrectParityBitValues(data).forEach((value, powerOf2) => {\n    data[Math.pow(2, powerOf2)] = value;\n  });\n\n  data[0] = data.reduce(\n    (accumulator, currentValue) => (accumulator ^= currentValue),\n    0\n  );\n\n  return data;\n}\n","import zeroOrOne from \"utils/zeroOrOne\";\n\nexport default function getCorrectParityBitValues(data: number[]): number[] {\n  const correctParityBitValues = [];\n\n  let powerOf2 = 0;\n  let parityBitIndex = Math.pow(2, powerOf2);\n  const length = data.length;\n\n  while (parityBitIndex < length) {\n    let paritySum = 0;\n    for (\n      let compareBitIndex = parityBitIndex + 1;\n      compareBitIndex < length;\n      ++compareBitIndex\n    ) {\n      if (compareBitIndex & parityBitIndex) {\n        paritySum += zeroOrOne(data[compareBitIndex]);\n      }\n    }\n\n    correctParityBitValues.push(paritySum % 2);\n\n    ++powerOf2;\n    parityBitIndex = Math.pow(2, powerOf2);\n  }\n\n  return correctParityBitValues;\n}\n","import React from 'react'\n\nimport dec2binPadded from \"utils/dec2binPadded\"\nimport \"./colorBinary.scss\"\n\ninterface ColorBinaryProps {\n  number: number,\n  paddedBinaryLength: number,\n}\n\nconst ColorBinary = (props:ColorBinaryProps) => {\n  const chars = dec2binPadded(props.number, props.paddedBinaryLength).split(\"\")\n\n  return (\n    <span>{chars.map((char, charIndex) =>\n      <span className={\"colorBinary\" + char} key={charIndex}>{char}</span>\n    )}</span>\n  )\n}\n\nexport default ColorBinary\n","import React from \"react\";\nimport memoize from \"memoize-one\";\n\nimport Bit from \"Components/Bit/Bit\";\nimport generateData from \"utils/generateData\";\nimport ColorBinary from \"Components/ColorBinary/ColorBinary\";\nimport isPowerOf2 from \"utils/isPowerOf2\";\nimport validateDataArray from \"utils/validateDataArray\";\n\nimport \"./App.scss\";\n\ninterface AppState {\n  data: number[];\n  dataContainerInnerWidth: number;\n  mousedOverBitIndex: number;\n  numberBits: number;\n  showBinary: boolean;\n}\n\ninterface RegularParityBit {\n  bit: number;\n  bitIndex: number;\n}\n\ninterface SharedBitProps {\n  doubleError: boolean;\n  errorIndex: number;\n  height: number;\n  mousedOverBitIndex: number;\n  numColumns: number;\n  numRows: number;\n  onClickBit: Function;\n  onMouseOverBit: Function;\n  paddedBinaryLength: number;\n  width: number;\n}\n\nconst MAX_ROW_CELL_SHOW_BINARY = 6;\nconst MAX_CELL_WIDTH = 100;\n\nclass App extends React.Component<{}, AppState> {\n  dataContainerInnerRef: React.RefObject<HTMLDivElement>;\n\n  constructor(props: {}) {\n    super(props);\n\n    const numberBits = 16;\n\n    this.state = {\n      data: generateData(numberBits),\n      dataContainerInnerWidth: Math.sqrt(16) * MAX_CELL_WIDTH,\n      mousedOverBitIndex: -1,\n      numberBits,\n      showBinary: true,\n    };\n\n    this.dataContainerInnerRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.resize();\n    window.addEventListener(\"resize\", this.resize);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resize);\n  }\n\n  calculations = memoize((data: number[]) => {\n    const numColumns = Math.ceil(Math.sqrt(data.length));\n\n    const regularParityBits: RegularParityBit[] = data\n      .filter((bit, bitIndex) => isPowerOf2(bitIndex))\n      .map((bit, powerOf2) => ({\n        bit,\n        bitIndex: Math.pow(2, powerOf2),\n      }))\n      .reverse();\n    const totalNumParityBits = regularParityBits.length + 1;\n\n    return {\n      ...validateDataArray(this.state.data),\n      efficiency: (\n        (100 * (data.length - totalNumParityBits)) /\n        data.length\n      ).toFixed(2),\n      numColumns,\n      numRows: Math.ceil(data.length / numColumns),\n      paddedBinaryLength: Math.ceil(Math.log(data.length) / Math.log(2)),\n      regularParityBits,\n      totalNumParityBits,\n    };\n  });\n\n  getBitDimensions = memoize(\n    (dataContainerInnerWidth: number, windowInnerWidth: number) => {\n      const dimension = Math.min(dataContainerInnerWidth / 4, MAX_CELL_WIDTH);\n\n      return {\n        bitHeight: dimension,\n        bitWidth: dimension,\n      };\n    }\n  );\n\n  generateNewData = (numberBits: number) =>\n    this.setState({\n      data: generateData(numberBits),\n      numberBits,\n    });\n\n  getMousedOverText = (paddedBinaryLength: number) => {\n    const { mousedOverBitIndex } = this.state;\n\n    if (this.state.mousedOverBitIndex >= 0) {\n      const returnArray = [];\n\n      if (mousedOverBitIndex === 0) {\n        returnArray.push(\n          <span>\n            Вы выбрали бит общей чётности {mousedOverBitIndex}\n            <span className=\"floatRight\">\n              (двоичный номер{\" \"}\n              <ColorBinary\n                number={mousedOverBitIndex}\n                paddedBinaryLength={paddedBinaryLength}\n              />\n              )\n            </span>\n          </span>,\n          <br />,\n          <span>\n            Этот бит отслеживает чётность остальной части сообщения. Общая\n            чётность сообщения должна быть 0 (чётная), включая этот бит.\n            <br></br>\n            1. Если чётность всего сообщения нечётная, и в основных контрольных\n            битах была совершена ошибка, значит в процессе передачи сообщения\n            была совершена одиночная ошибка.\n            <br></br>\n            2. Если же чётность всего сообщения чётная, и другие биты чётности\n            обнаруживают ошибку, значит в процессе передачи сообщения была\n            совершена двойная ошибка.\n          </span>\n        );\n      } else if (isPowerOf2(mousedOverBitIndex)) {\n        returnArray.push(\n          <span>\n            Вы выбрали бит контрольный бит {mousedOverBitIndex}\n            <span className=\"floatRight\">\n              (двоичный номер{\" \"}\n              <ColorBinary\n                number={mousedOverBitIndex}\n                paddedBinaryLength={paddedBinaryLength}\n              />\n              )\n            </span>\n          </span>,\n          <br />,\n          <span>\n            <br></br>\n            Он отслеживает все биты, имеющие единицу в разряде{\" \"}\n            {Math.log(mousedOverBitIndex) / Math.log(2)} двоичной записи своего\n            номера\n          </span>\n        );\n      } else {\n        returnArray.push(\n          <span>\n            Вы выбрали бит информационный бит {mousedOverBitIndex}\n            <span className=\"floatRight\">\n              (двоичный номер{\" \"}\n              <ColorBinary\n                number={mousedOverBitIndex}\n                paddedBinaryLength={paddedBinaryLength}\n              />\n              )\n            </span>\n          </span>,\n          <br />,\n          <br></br>,\n          <span>Он отслеживается следующими контрольными битами:</span>,\n          <br></br>\n        );\n        this.state.data.forEach((bit, bitIndex) => {\n          if (\n            bitIndex !== mousedOverBitIndex &&\n            isPowerOf2(bitIndex) &&\n            bitIndex & mousedOverBitIndex\n          ) {\n            returnArray.push(\n              <span>\n                &bull; Контрольным битом {bitIndex}\n                <span className=\"floatRight\">\n                  (двоичный номер{\" \"}\n                  <ColorBinary\n                    number={bitIndex}\n                    paddedBinaryLength={paddedBinaryLength}\n                  />\n                  )\n                </span>\n              </span>\n            );\n          }\n        });\n      }\n\n      return returnArray.map((element, index) => (\n        <div key={index}>{element}</div>\n      ));\n    }\n\n    return \"Наведите на бит, чтобы узнать о нём больше\";\n  };\n\n  getRegularParityBitsExplanation = (\n    doubleError: boolean,\n    errorIndex: number,\n    paddedBinaryLength: number,\n    regularParityBits: RegularParityBit[],\n    sharedBitProps: SharedBitProps\n  ) => {\n    if (doubleError) {\n      return (\n        <React.Fragment>\n          <br />\n          <div className=\"colorErrorBit errorDetected\">\n            Обнаружена двойная ошибка!\n          </div>\n        </React.Fragment>\n      );\n    } else if (errorIndex > 0) {\n      return (\n        <React.Fragment>\n          <br />\n          <div className=\"colorErrorBit errorDetected\">\n            Обнаружена одиночная ошибка!\n          </div>\n          <div\n            className=\"regularParityBitsContainer\"\n            onMouseLeave={(e) => this.setState({ mousedOverBitIndex: -1 })}\n          >\n            {regularParityBits.map((regularParityBit) => (\n              <Bit\n                key={regularParityBit.bitIndex}\n                absolutePositioned={false}\n                bit={regularParityBit.bitIndex & errorIndex ? 1 : 0}\n                bitIndex={regularParityBit.bitIndex}\n                isCell={true}\n                showBinary={\n                  regularParityBits.length <= MAX_ROW_CELL_SHOW_BINARY\n                }\n                {...sharedBitProps}\n              />\n            ))}\n          </div>\n\n          <br />\n\n          <div>\n            <button\n              onClick={(e) => this.swapIncorrectBit(doubleError, errorIndex)}\n              disabled={errorIndex === 0 || doubleError}\n            >\n              Исправить бит с ошибкой ({errorIndex})\n            </button>\n          </div>\n        </React.Fragment>\n      );\n    }\n  };\n\n  highlightBit = (bitIndex: number) =>\n    this.setState({ mousedOverBitIndex: bitIndex });\n\n  resize = () => {\n    if (this.dataContainerInnerRef.current) {\n      this.setState({\n        dataContainerInnerWidth: this.dataContainerInnerRef.current.clientWidth,\n      });\n    }\n  };\n\n  swapIncorrectBit = (doubleError: boolean, errorIndex: number) => {\n    if (errorIndex > 0 && doubleError === false) {\n      this.switchBit(errorIndex);\n    }\n  };\n\n  switchBit = (bitIndex: number) => {\n    const dataCopy = this.state.data.slice();\n    dataCopy[bitIndex] = dataCopy[bitIndex] > 0 ? 0 : 1;\n    this.setState({ data: dataCopy });\n  };\n\n  render() {\n    const { data, dataContainerInnerWidth, mousedOverBitIndex, showBinary } =\n      this.state;\n\n    const { bitHeight, bitWidth } = this.getBitDimensions(\n      dataContainerInnerWidth,\n      window.innerWidth\n    );\n\n    const {\n      doubleError,\n      efficiency,\n      errorIndex,\n      numColumns,\n      numRows,\n      paddedBinaryLength,\n      regularParityBits,\n      totalNumParityBits,\n      parity,\n    } = this.calculations(data);\n\n    const sharedBitProps: SharedBitProps = {\n      doubleError,\n      errorIndex,\n      height: bitHeight,\n      mousedOverBitIndex,\n      numColumns,\n      numRows,\n      onClickBit: this.switchBit,\n      onMouseOverBit: this.highlightBit,\n      paddedBinaryLength,\n      width: bitWidth,\n    };\n\n    return (\n      <div id=\"App\">\n        <section id=\"content\">\n          <div id=\"interactiveContainer\">\n            <div id=\"clickSwapMessage\">\n              <b>Нажмите на бит, чтобы поменять его значение</b>\n\n              <div id=\"toggleShowBinary\">\n                Показывать двоичные номера позиций битов{\" \"}\n                <input\n                  type=\"checkbox\"\n                  checked={showBinary}\n                  onChange={(e) => this.setState({ showBinary: !showBinary })}\n                />\n              </div>\n            </div>\n\n            <div id=\"dataContainer\">\n              <div ref={this.dataContainerInnerRef}>\n                <div\n                  id=\"cellsContainer\"\n                  onMouseLeave={(e) =>\n                    this.setState({ mousedOverBitIndex: -1 })\n                  }\n                  style={{\n                    height: bitHeight * numRows,\n                    width: bitWidth * numColumns,\n                  }}\n                >\n                  {data.map((bit, bitIndex) => (\n                    <Bit\n                      key={bitIndex}\n                      absolutePositioned={true}\n                      bit={bit}\n                      bitIndex={bitIndex}\n                      isCell={true}\n                      showBinary={showBinary}\n                      {...sharedBitProps}\n                    />\n                  ))}\n                </div>\n              </div>\n\n              <br />\n\n              <br />\n            </div>\n\n            <div id=\"legend\">\n              <div>\n                <span\n                  id=\"rawMessageContainer\"\n                  onMouseLeave={(e) =>\n                    this.setState({ mousedOverBitIndex: -1 })\n                  }\n                >\n                  Сообщение: \n                  {data.map((bit, bitIndex) => (\n                    <Bit\n                      key={bitIndex}\n                      absolutePositioned={false}\n                      bit={bit}\n                      bitIndex={bitIndex}\n                      isCell={false}\n                      {...sharedBitProps}\n                    />\n                  ))}\n                </span>\n              </div>\n            </div>\n\n            <div id=\"legend\">\n              <span className=\"legendKey\">\n                <span className=\"legendSquare colorZerothBit\"></span>{\" \"}\n                <span className=\"legendText\">Бит общей чётности</span>\n              </span>\n              <span className=\"legendKey\">\n                <span className=\"legendSquare colorParityBit\"></span>{\" \"}\n                <span className=\"legendText\">Контрольный бит</span>\n              </span>\n              <span className=\"legendKey\">\n                <span className=\"legendSquare colorDataBit\"></span>{\" \"}\n                <span className=\"legendText\">Информационный бит</span>\n              </span>\n              <span className=\"legendKey\">\n                <span className=\"legendSquare colorErrorBit\"></span>{\" \"}\n                <span className=\"legendText\">Бит с ошибкой</span>\n              </span>\n            </div>\n          </div>\n\n          <div id=\"sidebar\">\n            <div>\n              <div>\n                <b>Сгенерировать новое сообщение:</b>\n              </div>\n\n              <br />\n\n              <div>\n                <span>\n                  {[2, 4, 8].map((newDimension) => (\n                    <button\n                      key={newDimension}\n                      className=\"grouped\"\n                      onClick={(e) =>\n                        this.generateNewData(newDimension * newDimension)\n                      }\n                    >\n                      {newDimension * newDimension}\n                    </button>\n                  ))}\n                </span>{\" \"}\n                |{\" \"}\n                <input\n                  id=\"customNumberBits\"\n                  type=\"number\"\n                  step=\"1\"\n                  min=\"1\"\n                  value={this.state.numberBits}\n                  onChange={(e) =>\n                    this.generateNewData(parseInt(e.target.value))\n                  }\n                />{\" \"}\n                бита\n              </div>\n            </div>\n\n            <hr />\n\n            <b>Эффективность </b>\n            <p>\n              Информационные биты используются для передачи данных, в то время\n              как контрольные биты - нет.\n            </p>\n            <p>\n              Текущая эффективность использования объёма общего сообщения\n              составляет:\n            </p>\n            <div>\n              {data.length - totalNumParityBits} информационных бита /{\" \"}\n              {data.length} всего битов = <b>{efficiency}%</b>\n            </div>\n\n            <hr />\n\n            <div>\n              <b>Общая четность сообщения:</b> {parity} (\n              {parity === 1 ? \"нечётная\" : \"чётная\"})\n            </div>\n\n            <br />\n\n            <div>\n              <b>Текущие значения контрольных битов</b>\n            </div>\n            <div\n              className=\"regularParityBitsContainer\"\n              onMouseLeave={(e) => this.setState({ mousedOverBitIndex: -1 })}\n            >\n              {regularParityBits.map((parityBit) => (\n                <Bit\n                  key={parityBit.bitIndex}\n                  absolutePositioned={false}\n                  bit={parityBit.bit}\n                  bitIndex={parityBit.bitIndex}\n                  isCell={true}\n                  showBinary={\n                    regularParityBits.length <= MAX_ROW_CELL_SHOW_BINARY\n                  }\n                  {...sharedBitProps}\n                />\n              ))}\n            </div>\n\n            {this.getRegularParityBitsExplanation(\n              doubleError,\n              errorIndex,\n              paddedBinaryLength,\n              regularParityBits,\n              sharedBitProps\n            )}\n\n            <hr />\n\n            <div>{this.getMousedOverText(paddedBinaryLength)}</div>\n          </div>\n        </section>\n\n        <footer></footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import zeroOrOne from \"utils/zeroOrOne\";\n\nexport default function validateDataArray(data: number[]): {\n  doubleError: boolean;\n  errorIndex: number;\n  parity: number;\n} {\n  let errorIndex = 0;\n  let parity = 0;\n\n  data.forEach((bit, bitIndex) => {\n    const value = zeroOrOne(bit);\n    if (value === 1) {\n      errorIndex ^= bitIndex;\n    }\n\n    parity ^= value;\n  });\n\n  return {\n    doubleError: parity === 0 && errorIndex > 0,\n    errorIndex,\n    parity,\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}